{"version":3,"sources":["Components/Card/Card.jsx","api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","Components/Card/Card.module.css","App.module.css","Components/CountryPicker/CountryPicker.module.css","Components/Chart/Chart.module.css","Images/covid.png"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","Output","title","map","element","index","AppliedClasses","ClassNames","Card","Grid","item","component","key","xs","md","className","join","CardContent","Typography","gutterBottom","variant","start","end","value","duration","separator","color","Date","toDateString","Container","container","spacing","justify","Url","FetchData","country","a","url","axios","get","console","log","fetchDailyData","ModifiedData","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetch","LineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","BarChart","options","legend","display","text","CountryPicker","PickCountry","FetchedCountries","setFetchedCountries","getData","FormControl","NativeSelect","onChange","event","target","App","props","handleCountryChange","setState","state","bind","this","src","covid","Image","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.732e74b8.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\r\nimport ClassNames from \"./Card.module.css\";\r\nimport CountUp from \"react-countup\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return (<div> Loading ...!!</div>)\r\n    }\r\n    else {\r\n        const CardsData = [{...confirmed , title : \"Infected\"}, {...recovered , title : \"Recoverd\"}, {...deaths , title : \"Deaths\"}];\r\n        let Output = CardsData.map((element, index) => {\r\n            let AppliedClasses = [ClassNames.Card , ClassNames[element.title]]\r\n            return (\r\n                <Grid item component={Card} key = {index} xs = {12} md = {3} className = {AppliedClasses.join(\" \")}>\r\n                    <CardContent>\r\n                        <Typography gutterBottom>{element.title}</Typography>\r\n                        <Typography gutterBottom variant=\"h5\">\r\n                            <CountUp start={0} end={element.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography gutterBottom color=\"textSecondary\"> {new Date(lastUpdate).toDateString()}</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            )\r\n        })\r\n    return (\r\n        <div className={ClassNames.Container}>\r\n            <Grid container spacing={3} justify={\"space-around\"}>\r\n                {Output}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default Cards;","import axios from \"axios\"\r\nconst Url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const FetchData = async (country)=>{\r\n    let url  = (country && country!==\"global\") ? Url + \"/countries/\"+ country  :  Url ;\r\n    try{\r\n        const {data : {confirmed , recovered   , lastUpdate  , deaths}} = await axios.get(url) ;\r\n\r\n        return {confirmed , recovered   , lastUpdate , deaths } ;\r\n    }\r\n    catch(error){\r\n        console.log(\"The Error \" , error ) ;\r\n    }\r\n}\r\nexport const fetchDailyData = async ()=>{\r\n    try{\r\n        const {data} = await axios.get(`${Url}/daily`) ;\r\n        const ModifiedData = data.map((dailyData)=>({\r\n                confirmed : dailyData.confirmed.total ,\r\n                deaths : dailyData.deaths.total ,\r\n                date : dailyData.reportDate  ,\r\n        }))\r\n        return ModifiedData ;\r\n    }\r\n    catch(error){\r\n    }\r\n}\r\nexport const fetchCountries = async ()=>{\r\n    try{\r\n        const {data : {countries}} = await axios.get(`${Url}/countries`)\r\n        return countries.map((country)=>country.name)\r\n    }\r\n    catch(error){\r\n    }\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport ClassNames from \"./Chart.module.css\";\r\nconst Chart = ({ data : {confirmed , deaths , recovered }, country }) => {\r\n    let [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetch();\r\n    },[])\r\n    const LineChart = dailyData.length ? (\r\n        <Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map((({ confirmed }) => confirmed)),\r\n                    label: \"Infected\",\r\n                    borderColor: \"#3333ff\",\r\n                    fill: true,\r\n                }, {\r\n                    data: dailyData.map((({ deaths }) => deaths)),\r\n                    label: \"Deathss\",\r\n                    backgroundColor: \"rgba(255 , 0 , 0 , .5)\",\r\n                    borderColor: \"red\",\r\n                    fill: true,\r\n                }]\r\n            }}\r\n        />\r\n    ) : null;\r\n    const BarChart = (\r\n        confirmed ? <Bar\r\n            data={{\r\n                labels: [\"Infected \", \"Recovered\", \"Deaths\"],\r\n                datasets: [{\r\n                    label: \"People\",\r\n                    backgroundColor: [\"rgba(0,0,255,.5)\", \"rgba(0,255,0,.5)\", \"rgba(255,0,0,.5)\"],\r\n                    data : [confirmed.value,  recovered.value , deaths.value ]\r\n                }],\r\n            }}\r\n            options={{\r\n                legend: { display: false },\r\n                title: { display: true, text: `Current state in ${country}` }\r\n            }}\r\n        /> : null\r\n    )\r\n    return (\r\n            <div className={ClassNames.Container}>{country && country !== \"global\" ? BarChart : LineChart}</div>\r\n    )\r\n}\r\nexport default Chart;","import React, { useState, useEffect } from 'react'\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport ClassNames from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api/index\";\r\n\r\nconst CountryPicker = ({PickCountry}) => {\r\n    let [FetchedCountries, setFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        getData();\r\n    }, []);\r\n    return (\r\n        <div className={ClassNames.Container}>\r\n            <FormControl className={ClassNames.FormControl}>\r\n                <NativeSelect onChange = {(event)=>PickCountry(event.target.value)}>\r\n                    <option value=\"global\"> Global</option>\r\n                    {FetchedCountries.map((country, index) => (<option key={index} value={country}>{country}</option>))}\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\nexport default CountryPicker;","import React, { Component } from 'react'\nimport ClassNames from \"./App.module.css\" ;\nimport {Cards ,Chart , CountryPicker} from \"./Components\"\nimport {FetchData} from \"./api\" ;\nimport covid from \"./Images/covid.png\";\nexport class App extends Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {\n          data : {} ,\n          country : null , \n      }\n      this.handleCountryChange = this.handleCountryChange.bind(this) ;\n    }\n    \n  handleCountryChange = async(country)=>{\n    // Fetching the Data, \n    const data = await FetchData(country) ;\n    this.setState({data , country})\n  }\n  async componentDidMount (){\n    const data = await FetchData() ;\n    this.setState({data})\n  }\n  render() {\n    let {data , country} = this.state;\n    return ( \n      <div className = {ClassNames.Container}>\n          <img src= {covid} className = {ClassNames.Image} alt = {\"Covid19\"} />\n          <Cards data = {data}/>\n          <CountryPicker PickCountry = {this.handleCountryChange}/>\n          <Chart data = {data} country = {country} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Card_Container__S3IhW\",\"Card\":\"Card_Card__3Em8m\",\"Infected\":\"Card_Infected__3AMPk\",\"Recoverd\":\"Card_Recoverd__1Sl3D\",\"Deaths\":\"Card_Deaths__2i8_k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"App_Container__ppy6K\",\"Image\":\"App_Image__2oeSj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CountryPicker_Container__Lw7UX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Chart_Container__2ShI9\"};","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";"],"sourceRoot":""}